syntax = "proto3";

option go_package = "example";
package example;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "protoc-gen-generator/proto/option.proto";

service example {
    rpc HelloWorld(google.protobuf.Empty) returns(HelloWorldMessage) {
        option (google.api.http) = {
            get: "/v1/example/echo"
        };
        option(httpMode) = "get";
    };

    rpc HelloTest(Test) returns(HelloWorldMessage) {
        option (google.api.http) = {
            post: "/v1/example/echo",
            body: "*"
        };
        option(httpMode) = "post";
    };
    rpc HelloBring(HelloWorldMessage) returns(HelloWorldMessageReturn) {
        option (google.api.http) = {
            delete: "/v1/example/echo"
        };
        option(httpMode) = "delete";
        option(agregator) = "HelloWorldMessage.Create";
    };
}

message HelloWorldMessage {
    option (isRepo) = true;
    string name = 1 [(isPrimaryKey) = true, (required) = true, (required_type) ="min_max*5.10"];
    string message = 2 [(required) = true, (required_type) ="not_empty_string"];
    repeated Test test = 3 [(ignoreFieldDb) = true];
    Single single = 4;
    string email = 5 [(required) = true, (required_type) ="email"];
}

message Test {
    string data_test = 1 [(isPrimaryKey) = true];
    int64 numbers_data = 2;
    bool ex_bool = 3;
    option (isRepo) = true;
}

enum TType {
    CREATE = 0;
    UPDATE = 1;
    DELETE = 2;
}

message Single {
    string who = 1;
    option (foo) = "bar";
    TType ttypes = 2; 
}

message ServerError {
    int32 code = 1;
    string decription = 2;
}

message FieldValidationError {
    string field = 1;
    string error = 2;
}

message ValidationError {
    repeated FieldValidationError fields = 1;
}

message HelloWorldMessageReturn {
    string message = 1;
    oneof error {
        ServerError exception = 2;
        ValidationError form_error = 3;
    };
}