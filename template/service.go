package template

import lib "github.com/zokypesch/protoc-gen-generator/lib"

var tmplService = `package handler

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: {{ .FileName }}_{{ .GoPackage }}
// File Location: handler/{{ ucfirst (getFirstService .Services).Name }}.service.go

import  (
	pb "{{ .Src }}/grpc/pb/{{ .GoPackage }}"
	"context"
	// "fmt"
	empty "github.com/golang/protobuf/ptypes/empty"
	repo "{{ .Src }}/repo"
	// model "{{ .Src }}/model"
)

{{- range $service := .Services }}
type {{ ucfirst $service.Name }}Service struct{
	repo *repo.MasterRepository
}

// {{ ucfirst $service.Name }}Svc for service singleton
var {{ $service.Name }}Svc *{{ ucfirst $service.Name }}Service

// New{{ ucfirst $service.Name }}Service for new repository service
func New{{ ucfirst $service.Name }}Service(repo *repo.MasterRepository) *{{ ucfirst $service.Name }}Service {
	if {{ $service.Name }}Svc == nil {
		{{ $service.Name }}Svc = &{{ ucfirst $service.Name }}Service{
			repo,
		}
	}
	return {{ $service.Name }}Svc
}

{{- range $method := $service.Methods }}
// {{ ucfirst $method.Name }} method declare by generated code
{{- if eq $method.Input "empty"}}
func (svc *{{ ucfirst $service.Name }}Service) {{ ucfirst $method.Name }}(ctx context.Context, in *empty.Empty) (*pb.{{ ucfirst $method.Output }}, error) {
{{- else}}
func (svc *{{ ucfirst $service.Name }}Service) {{ ucfirst $method.Name }}(ctx context.Context, in *pb.{{ ucfirst $method.Input }}) (*pb.{{ ucfirst $method.Output }}, error) {
{{- end}}
	return &pb.{{ ucfirst $method.Output }}{}, nil
}
{{- end}}
{{- end}}

`

var ListService = lib.List{
	FileType: ".service.go",
	Template: tmplService,
	Location: "./handler/",
	Lang:     "go",
}
