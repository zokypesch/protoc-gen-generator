package template

import lib "github.com/zokypesch/protoc-gen-generator/lib"

var tmplRepositoryGo = `package {{ ucdown (getFirstService .Services).Name }}

// Code generated by sangkuriang protoc-gen-go. DO NOT EDIT.
// source: {{ .FileName }}_{{ .GoPackage }}
// File Location: {{ ucfirst (getFirstService .Services).Name }}.repository.go

import (
	"github.com/jinzhu/gorm"
)

{{- range $msg := .Messages }}
{{- if $msg.IsRepository}} 

// {{ ucfirst $msg.Name }} for struct info
type {{ ucfirst $msg.Name }}Repository struct {
	db *gorm.DB
}

// {{ ucfirst $msg.Name }}RepoService for interfacing repository
type {{ ucfirst $msg.Name }}RepoService interface {
	GetBy{{ $msg.PrimaryKeyName }}(payload *{{ ucfirst $msg.Name }}) (*{{ucfirst $msg.Name}}, error)
	GetAll(payload *{{ ucfirst $msg.Name }}) ([]{{ ucfirst $msg.Name }}, error)
	Create(payload *{{ ucfirst $msg.Name }}) (*{{ucfirst $msg.Name}}, error)
	Update(payload *{{ ucfirst $msg.Name }}) (*{{ ucfirst $msg.Name }}, error)
	Delete(payload *{{ ucfirst $msg.Name }}) (*{{ ucfirst $msg.Name }}, error)
}

// {{ ucfirst $msg.Name }} for repository singleton
var {{ $msg.Name }}Repo {{ ucfirst $msg.Name }}RepoService

// New{{ ucfirst $msg.Name }}RepoService for new repository service
func New{{ ucfirst $msg.Name }}RepoService(db *gorm.DB) {{ ucfirst $msg.Name }}RepoService {
	if {{ $msg.Name }}Repo == nil {
		{{ $msg.Name }}Repo = &{{ ucfirst $msg.Name }}Repository{
			db,
		}
	}
	return {{ $msg.Name }}Repo
}

// GetBy{{ $msg.PrimaryKeyName }} for get by primarykey
func (repo *{{ ucfirst $msg.Name }}Repository) GetBy{{ $msg.PrimaryKeyName }}(payload *{{ ucfirst $msg.Name }}) (*{{ ucfirst $msg.Name }}, error) {
	var data {{ ucfirst $msg.Name }}
	db := repo.db.Where("{{ underscore $msg.PrimaryKeyName }} = ?", payload.{{ ucfirst $msg.PrimaryKeyName }}).Find(&data)

	return &data, db.Error
}

// GetAll for get all from table
func (repo *{{ ucfirst $msg.Name }}Repository) GetAll(payload *{{ ucfirst $msg.Name }}) ([]{{ ucfirst $msg.Name }}, error) {
	limit := 1000
	page := 1
	offset := (int(page) - 1) * limit

	var data []{{ ucfirst $msg.Name }}
	db := repo.db.Set("gorm:auto_preload", true).Where(payload).Offset(offset).Limit(limit).Find(&data)

	return data, db.Error

}

// Create for create database
func (repo *{{ ucfirst $msg.Name }}Repository) Create(payload *{{ ucfirst $msg.Name }}) (*{{ ucfirst $msg.Name }}, error) {
	err := repo.db.Create(payload).Error

	return payload, err
}

// Update for update data
func (repo *{{ ucfirst $msg.Name }}Repository) Update(payload *{{ ucfirst $msg.Name }}) (*{{ ucfirst $msg.Name }}, error) {
	err := repo.db.Model(&{{ ucfirst $msg.Name }}{{unescape "{"}}{{ $msg.PrimaryKeyName }}: payload.{{ ucfirst $msg.PrimaryKeyName }}{{unescape "}"}}).Update(payload).Error

	return payload, err
}

// Delete for delete data
func (repo *{{ ucfirst $msg.Name }}Repository) Delete(payload *{{ ucfirst $msg.Name }}) (*{{ ucfirst $msg.Name }}, error) {
	err := repo.db.Delete({{ ucfirst $msg.Name }}{{unescape "{"}}{{unescape "}"}}, "{{ underscore $msg.PrimaryKeyName }} = ?", payload.{{ ucfirst $msg.PrimaryKeyName }}).Error

	return payload, err
}

{{- end}}

{{- end}}



`

var ListRepositoryGolang = lib.List{
	FileType: ".repository.go",
	Template: tmplRepositoryGo,
	Location: "./%s/",
	Lang:     "go",
}
