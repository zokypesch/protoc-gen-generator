package template

import lib "github.com/zokypesch/protoc-gen-generator/lib"

var tmplTypeScript = `
// Code generated by sangkuriang protoc-gen-go. DO NOT EDIT.
// source: {{ .FileName }}_{{ .GoPackage }}
// File Location: api/{{ ucfirst (getFirstService .Services).Name }}.ts

import {defaultProps, Api} from "./ApiConfig"
import {buildParams} from "./Util"

{{- range $msg := .Messages }}
export interface {{ $msg.Name }} {
{{- range $field := $msg.Fields }}
	{{ $field.Name }}:{{ $field.TypeData }}
{{- end}}
}
{{- end}}

{{- range $enum := .Enums }}
export enum {{ $enum.Name }} {
{{- range $opt := $enum.Options }}
	{{ $opt.Name }}={{ $opt.Value }},
{{- end}}
}
{{- end}}

interface OutputGeneral<T> {
    loading: boolean,
    data?: T,
    error: string | null | undefined
    isRefreshing: boolean
}

{{- range $service := .Services }}
{{- range $method := $service.Methods }}
export type Output{{ $method.Name }} = OutputGeneral{{unescape "<"}}{{ $method.Output }}{{unescape ">"}}
{{- end}}
{{- end}}

{{- range $service := .Services }}
class {{ $service.Name }} {
	props: defaultProps;
    constructor(params: defaultProps) {
        this.props = params
	}
{{- range $method := $service.Methods }}
{{- if eq $method.HttpMode "get"}}
{{- if eq $method.Input "empty"}}
	{{ $method.Name }} = () => Api(this.props).{{ $method.HttpMode }}("{{ $method.URLPath }}")
{{- else}}
	{{ $method.Name }} = (params: {{ $method.Input }}) => Api(this.props).{{ $method.HttpMode }}(buildParams("{{ $method.URLPath }}", params))
{{- end}}
{{- else}}
	{{ $method.Name }} = (params: {{ $method.Input }}) => Api(this.props).{{ $method.HttpMode }}("{{ $method.URLPath }}", JSON.stringify(params))
{{- end}}
{{- end}}
}
{{- end}}
export default {{ ucfirst (getFirstService .Services).Name }}

`

// send it to your main screen
// import Api from '../../store/api/{{ .FileName }}'
// const [listState, setListState ] = React.useState<ListState>({loading: false, error: null, isRefreshing: false})

var ListTypeScript = lib.List{
	FileType: ".api.ts",
	Template: tmplTypeScript,
	Location: "./typescript/",
	Lang:     "ts",
}
