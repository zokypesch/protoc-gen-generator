package template

import lib "github.com/zokypesch/protoc-gen-generator/lib"

var tmplTypeScriptScreen = `
// Code generated by protoc-gen-go. DO NOT EDIT.
// source: {{ .FileName }}_{{ .GoPackage }}
// File Location: api/{{ ucfirst (getFirstService .Services).Name }}.ts

import React from 'react'
import {CustomNavigationProps} from '../types'
import {mapStateToProps, mapDispatchToProps, TypeAllProps} from '../../store/Props'
import {connect} from 'react-redux';
import { NavigationStackScreenProps } from "react-navigation-stack";
import {defaultProps} from "../../store/api/ApiConfig"
import {getAllResponse, getAllDetail} from "../../store/api/Inbox"
import Api, {{unescape "{"}} {{ (getFirstService .Services).MethodsName }} {{unescape "}"}} from '../../store/api/{{ ucfirst (getFirstService .Services).Name }}'
import {generalResponseWithoutType} from '../../store/api/General'
import CrashReport from '../../service/CrashPush'
import {View} from 'react-native'
import styles from './styles'

{{- range $service := .Services }}

const {{ $service.Name }} = (props: NavigationStackScreenProps{{unescape "<"}}CustomNavigationProps{{unescape "<"}}null{{unescape ">"}}{{unescape ">"}} & TypeAllProps) => {
	
	{{- range $method := $service.Methods }}
	const [listState{{ $method.Name }}, setListState{{ $method.Name }} ] = React.useState{{unescape "<"}}Output{{ $method.Name }}{{unescape ">"}}({loading: false, error: null, isRefreshing: false})
	{{- end}}

	const callbackUnauthorize = () => {
        props.navigation.navigate("LoginScreen")
	}

	const getPropsParams = (): defaultProps => {
		return {
			token: props.auth.token,
			callBackUnauthorize: callbackUnauthorize
		} as defaultProps
	}

{{- range $method := $service.Methods }}

	{{- if eq $method.Input "empty"}}
	async function {{ $method.HttpMode }}Action{{ $method.Name }}() { 
	{{- else}}
	async function {{ $method.HttpMode }}Action{{ $method.Name }}(params: {{ $method.Input }}) { 
	{{- end}}
		const act = new Api(getPropsParams())
		setListState{{ $method.Name }}({...listState{{ $method.Name }}, loading: true })
		{{- if eq $method.Input "empty"}}
		let res:generalResponseWithoutType{{unescape "<"}}Output{{ $method.Name }}{{unescape ">"}} = act.{{ $method.Name }}()
		{{- else}}
		let res:generalResponseWithoutType{{unescape "<"}}Output{{ $method.Name }}{{unescape ">"}} = act.{{ $method.Name }}(params)
		{{- end}}

		res.then(dt => {
			if (dt.status !== 200) {
				alert("error !!")
				setListState{{ $method.Name }}({loading: false, error: "there is something wrong", ...listState{{ $method.Name }}})
				return
			} 
			setListState{{ $method.Name }}({loading: false, error: null, data: dt.data.data, isRefreshing: false})
		}).catch(error => {
			CrashReport(1, error.toString())
			setListState{{ $method.Name }}({loading: false, error: "there is something wrong", ...listState{{ $method.Name }}})
		})
	}
{{- end}}
}
{{- end}}

export default connect(
    mapStateToProps,
    mapDispatchToProps
)({{ ucfirst (getFirstService .Services).Name }});

`

var ListTypeScriptScreen = lib.List{
	FileType: ".screen.ts",
	Template: tmplTypeScriptScreen,
	Location: "./typescript/",
	Lang:     "ts",
}
