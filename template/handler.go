package template

import lib "github.com/zokypesch/protoc-gen-generator/lib"

var tmplHandler = `package handler

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: {{ .FileName }}_{{ .GoPackage }}
// File Location: handler/{{ ucfirst (getFirstService .Services).Name }}.handler.go

import  (
	pb "{{ .Src }}/grpc/pb/{{ .GoPackage }}"
	"context"
	empty "github.com/golang/protobuf/ptypes/empty"
	validator "github.com/go-playground/validator"
	model "{{ .Src }}/model"
)

{{- range $service := .Services }}
type {{ ucfirst $service.Name }} struct{
	svc *{{ ucfirst $service.Name }}Service
	validate *validator.Validate
}

func New{{ ucfirst $service.Name }}(svc *{{ ucfirst $service.Name }}Service) *{{ ucfirst $service.Name }} {
	validate := validator.New()
	return &{{ ucfirst $service.Name }}{{ unescape "{" }}svc, validate{{ unescape "}" }}
}

{{- range $method := $service.Methods }}
// {{ ucfirst $method.Name }} method declare by generated code
{{- if eq $method.Input "empty"}}
func (handler *{{ ucfirst $service.Name }}) {{ ucfirst $method.Name }}(ctx context.Context, in *empty.Empty) (*pb.{{ ucfirst $method.Output }}, error) {
{{- else}}
func (handler *{{ ucfirst $service.Name }}) {{ ucfirst $method.Name }}(ctx context.Context, in *pb.{{ ucfirst $method.Input }}) (*pb.{{ ucfirst $method.Output }}, error) {
{{- end}}

{{- if eq $method.Input "empty"}}
{{- else}}
	model := model.{{ ucfirst $method.Input }}{}

{{- range $field := $method.InputMessage.Fields }}
{{- if $field.RequiredOption}}
	model.{{ ucfirst $field.Name }} = in.{{ ucfirst $field.Name }}
{{- end}}
{{- end}}

	if err := handler.validate.Struct(model); err != nil {
		return &pb.{{ ucfirst $method.Output }}{}, err
	}
{{- end}}
	return handler.svc.{{ ucfirst $method.Name }}(ctx, in)
}
{{- end}}
{{- end}}

`

var ListHandler = lib.List{
	FileType: ".handler.go",
	Template: tmplHandler,
	Location: "./handler/",
	Lang:     "go",
}
